openapi: '3.0.2'
info:
  title: Web3.Storage API
  description: |
    This documentation describes the HTTP API for [**Web3.Storage**](https://web3.storage), which allows you to quickly and easily build applications using decentralized data storage persisted by [Filecoin](https://filecoin.io) and available over [IPFS](https://ipfs.io).

    You can also interact with this API using client libraries. See [**docs.web3.storage**](https://docs.web3.storage) for more information on using a client library, as well as a variety of other guides and how-tos for Web3.Storage as a whole.

    ## API endpoint URL

    The main public API endpoint URL for Web3.Storage is `https://api.web3.storage`. All endpoints described in this document should be made relative to this root URL. For example, to post to the `/car` endpoint, send your request to `https://api.web3.storage/car`.
    
    ### Rate limits

    This API imposes rate limits to ensure quality of service. You may receive a 429 "Too many requests" error if you make more than 30 requests with the same API token within a ten second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits.

  version: '1.0'
  license: {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }

servers:
  - url: https://api.web3.storage

tags:
  - name: Web3.Storage HTTP API
    description: " "
paths:
  /car:
    post:
      tags:
        - Web3.Storage HTTP API
      summary: Upload a CAR
      description: |
        Upload a [CAR](https://ipld.io/specs/transport/car/) (Content Addressable aRchive) file and store the [IPFS DAG](https://docs.ipfs.io/concepts/merkle-dag/)
        (Directed Acyclic Graph) it contains.

        See the [Working with Content Archives guide](https://docs.web3.storage/how-tos/work-with-car-files) for details on creating CARs and splitting them into chunks for upload using the [carbites JavaScript API](https://github.com/nftstorage/carbites),
        [command line tool](https://github.com/nftstorage/carbites-cli/), or [Go library](https://github.com/alanshaw/go-carbites).

        Requests to this endpoint have a maximum payload size of 100MB but partial DAGs are supported, so multiple CAR files with the same root but with different sub-trees can be sent. This enables uploading of files that are bigger than the maximum payload size.

        Note that only one CAR can be uploaded at a time, and only CAR files are accepted. This is in contrast to [`/upload`](#operation/post-upload), which can upload multiple files at once and accepts both CAR files and files from the client.

        You can also provide a name for the file using the header `X-NAME`, but be sure to encode the filename first. For example `LICENSE–MIT` should be sent as `LICENSE%E2%80%93MIT`.
      operationId: post-car
      requestBody:
        required: true
        content:
          application/car:
            schema:
              type: string
              format: binary
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '5XX':
          $ref: '#/components/responses/internalServerError'
  /car/{cid}:
    get:
      tags:
        - Web3.Storage HTTP API
      summary: Retrieve a CAR
      description: Retrieve an [IPFS DAG](https://docs.ipfs.io/concepts/merkle-dag/) (Directed Acyclic Graph) packaged in a CAR file by using `/car/{cid}`, supplying the CID of the data you are interested in.
      operationId: get-car-cid
      security: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CID'
      responses:
        '200':
          description: OK
          content:
            'application/car':
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/badRequest'
        '5XX':
          $ref: '#/components/responses/internalServerError'
    head:
      tags:
        - Web3.Storage HTTP API
      summary: Retrieve HTTP headers regarding a CAR
      description: |
        This method is useful for doing a dry run of a call to `/car/{cid}`. Because it only returns HTTP header information, it is far more lightweight and can be used to get only the metadata about the given CAR file without retrieving a whole payload in the body of the HTTP response.
      operationId: head-car-cid
      security: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CID'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/badRequest'
        '5XX':
          $ref: '#/components/responses/internalServerError'
  /status/{cid}:
    get:
      tags:
        - Web3.Storage HTTP API
      summary: Retrieve information about an upload
      description: Retrieve metadata about a specific file by using `/status/{cid}`, supplying the CID of the file you are interested in. This metadata includes the creation date and file size, as well as details about how the network is storing your data. Using this information, you can identify peers on the [IPFS (InterPlanetary File System)](https://ipfs.io) network that are pinning the data, and [Filecoin](https://filecoin.io) storage providers that have accepted deals to store the data.
      operationId: get-status-cid
      security: []
      parameters:
        - name: cid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CID'
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/badRequest'
        '5XX':
          $ref: '#/components/responses/internalServerError'
  /upload:
    post:
      tags:
        - Web3.Storage HTTP API
      summary: Upload and store one or more files
      description: |
        Store files using Web3.Storage. You can upload either a single file or multiple files.

        Send the POST request with one of the following:
        - a single file, with a single blob/file object as the body
        - multiple files, as `FormData` with `Content-Disposition` headers for each part to specify filenames and the request header `Content-Type: multipart/form-data`

        Requests to this endpoint have a maximum payload size of 100MB. To upload larger files, see the documentation for the `/car` endpoint.

        You can also provide a name for the file using the header `X-NAME`, but be sure to encode the filename first. For example `LICENSE–MIT` should be sent as `LICENSE%E2%80%93MIT`.
      operationId: post-upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/UploadResponse'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '5XX':
          $ref: '#/components/responses/internalServerError'
  /user/uploads:
    get:
      tags:
        - Web3.Storage HTTP API
      summary: List previous uploads
      description: |
        Lists all previous uploads for the account ordered by creation date, newest first. These results can be paginated by specifying `before` and `size` parameters in the query string, using the creation date associated with the oldest upload returned in each batch as the value of `before` in subsequent calls.

        Note this endpoint returns all uploads for the account not just the API key in use.

        The information returned includes the creation date and file size, as well as details about how the network is storing your data. Using this information, you can identify peers on the [IPFS (InterPlanetary File System)](https://ipfs.io) network that are pinning the data, and [Filecoin](https://filecoin.io) storage providers that have accepted deals to store the data.
      operationId: get-user-uploads
      parameters:
        - $ref: '#/components/parameters/before'
        - $ref: '#/components/parameters/size'
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '5XX':
          $ref: '#/components/responses/internalServerError'
  /pins:
    get:
      tags:
        - Web3.Storage HTTP API
      summary: List pin objects
      description: List all the pin objects, matching optional filters; when no filter is provided, only successful pins are returned
      operationId: get-pins
      parameters:
        - $ref: '#/components/parameters/cid'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/psaStatus'
        - $ref: '#/components/parameters/psaBefore'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/meta'
      responses:
        '200':
          description: Successful response (PinResults object)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinResults'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '4XX':
          $ref: '#/components/responses/CustomServiceError'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Web3.Storage HTTP API
      summary: Add pin object
      description: Add a new pin object for the current access token
      operationId: post-pins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PSAPin'
      responses:
        '202':
          description: Successful response (PinStatus object)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '4XX':
          $ref: '#/components/responses/CustomServiceError'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
  /pins/{requestid}:
    parameters:
      - name: requestid
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Web3.Storage HTTP API
      summary: Get pin object
      description: Get a pin object and its status
      operationId: get-pins-requestid
      responses:
        '200':
          description: Successful response (PinStatus object)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '4XX':
          $ref: '#/components/responses/CustomServiceError'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Web3.Storage HTTP API
      summary: Replace pin object
      description: Replace an existing pin object (shortcut for executing remove and add operations in one step to avoid unnecessary garbage collection of blocks present in both recursive pins)
      operationId: post-pins-requestid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PSAPin'
      responses:
        '202':
          description: Successful response (PinStatus object)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PinStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '4XX':
          $ref: '#/components/responses/CustomServiceError'
        '5XX':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Remove pin object
      description: Remove a pin object
      operationId: delete-pins-requestid
      tags:
        - Web3.Storage HTTP API
      responses:
        '202':
          description: Successful response (no body, pin removed)
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/InsufficientFunds'
        '4XX':
          $ref: '#/components/responses/CustomServiceError'
        '5XX':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Status:
      type: object
      properties:
        cid:
          $ref: '#/components/schemas/CID'
        dagSize:
          description: Total size of the DAG in bytes.
          type: number
          default: 132614
        created:
          $ref: '#/components/schemas/Date'
        pins:
          type: array
          items:
            $ref: '#/components/schemas/Pin'
        deals:
          type: array
          items:
            $ref: '#/components/schemas/Deal'
    Deal:
      type: object
      properties:
        dealId:
          description: On-chain ID of the deal.
          type: number
          example: 138
        storageProvider:
          description: Address of the provider storing this data.
          type: string
          example: f05678
        status:
          description: Current deal status.
          type: string
          enum:
            - Queued
            - Published
            - Active
        pieceCid:
          description: 'Filecoin [Piece CID](https://spec.filecoin.io/systems/filecoin_files/piece/) of the data in the deal.'
          type: string
          example: bafkreidivzimqfqtoqxkrpge6bjyhlvxqs3rhe73owtmdulaxr5do5in7u
        dataCid:
          description: CID of the data aggregated in this deal.
          type: string
          example: bafkreidivzimqfqtoqxkrpge6bjyhlvxqs3rhe73owtmdulaxr5do5in7u
        dataModelSelector:
          description: Selector for extracting stored data from the aggregated data root.
          type: string
          example: 'Links/100/Hash/Links/0/Hash/Links/0/Hash'
        activation:
          description: 'Date when the deal will become active in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.'
          type: string
          example: '2021-03-18T11:46:50.000Z'
        created:
          description: 'Creation date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.'
          type: string
          example: '2021-03-18T11:46:50.000Z'
        updated:
          description: 'Updated date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.'
          type: string
          example: '2021-03-18T11:46:50.000Z'
      required:
        - status
        - created
        - updated
    Date:
      type: string
      format: date-time
      example: '2021-03-12T17:03:07.787Z'
      description: 'This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.'
    CID:
      type: string
      example: bafkreidivzimqfqtoqxkrpge6bjyhlvxqs3rhe73owtmdulaxr5do5in7u
      description: Self-describing content-addressed identifiers for distributed systems. Check the [CID (Content IDentifier) Specification](https://github.com/multiformats/cid) for more info.
    Pin:
      type: object
      properties:
        peerId:
          description: Libp2p peer ID of the node pinning the data.
          type: string
          example: 12D3KooWMbibcXHwkSjgV7VZ8TMfDKi6pZvmi97P83ZwHm9LEsvV
        peerName:
          description: Human readable name for the peer pinning the data.
          type: string
          example: web3-storage-dc13
        region:
          description: Approximate geographical region of the node pinning the data.
          type: string
          example: US-DC
        status:
          # $ref: '#/components/schemas/PinStatus'
          type: string
          enum:
            - PinQueued
            - Pinning
            - Pinned
        updated:
          $ref: '#/components/schemas/Date'
    UploadResponse:
      type: object
      properties:
        cid:
          $ref: '#/components/schemas/CID'
    ErrorResponse:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    UnauthorizedErrorResponse:
      type: object
      properties:
        name:
          type: string
          default: HTTP Error
        message:
          type: string
          default: Unauthorized
    ForbiddenErrorResponse:
      type: object
      properties:
        name:
          type: string
          default: HTTP Error
        message:
          type: string
          enum: [Token is not valid, Session expired]

    PinResults:
      description: Response used for listing pin objects matching request
      type: object
      required:
        - count
        - results
      properties:
        count:
          description: The total number of pin objects that exist for passed query filters
          type: integer
          format: int32
          minimum: 0
          example: 1
        results:
          description: An array of PinStatus results
          type: array
          items:
            $ref: '#/components/schemas/PinStatus'
          uniqueItems: true
          minItems: 0
          maxItems: 1000
    PinStatus:
      # summary: PinStatus
      description: Pin object with status
      type: object
      required:
        - requestid
        - status
        - created
        - pin
        - delegates
      properties:
        requestid:
          description: Globally unique identifier of the pin request; can be used to check the status of ongoing pinning, or pin removal
          type: string
          example: "UniqueIdOfPinRequest"
        status:
          # $ref: '#/components/parameters/psaStatus'
          description: Status a pin object can have at a pinning service
          type: string
          enum:
            - queued     # pinning operation is waiting in the queue; additional info can be returned in info[status_details]      
            - pinning    # pinning in progress; additional info can be returned in info[status_details]
            - pinned     # pinned successfully
            - failed     # pinning service was unable to finish pinning operation; additional info can be found in info[status_details]
          example: "queued"
          
        created:
          description: Immutable timestamp indicating when a pin request entered a pinning service; can be used for filtering results and pagination
          type: string
          format: date-time  # RFC 3339, section 5.6
          example: "2020-07-27T17:32:28Z"
        pin:
          description: Pin object
          type: object
          required:
            - cid
          properties:
            cid:
              description: Content Identifier (CID) to be pinned recursively
              type: string
              example: "QmCIDToBePinned"
            name:
              description: Optional name for pinned data; can be used for lookups later
              type: string
              maxLength: 255
              example: "PreciousData.pdf"
            origins:
              $ref: '#/components/schemas/Origins'
            meta:
              $ref: '#/components/schemas/PinMeta'
        delegates:
          $ref: '#/components/schemas/Delegates'
        info:
          $ref: '#/components/schemas/StatusInfo'
    Delegates:
      description: List of multiaddrs designated by pinning service for transferring any new data from external peers
      type: array
      items:
        type: string
      uniqueItems: true
      minItems: 1
      maxItems: 20
      example: ['/ip4/203.0.113.1/tcp/4001/p2p/QmServicePeerId']
    Origins:
      description: Optional list of multiaddrs known to provide the data
      type: array
      items:
        type: string
      uniqueItems: true
      minItems: 0
      maxItems: 20
      example: ['/ip4/203.0.113.142/tcp/4001/p2p/QmSourcePeerId', '/ip4/203.0.113.114/udp/4001/quic/p2p/QmSourcePeerId']
    PinMeta:
      description: Optional metadata for pin object
      type: object
      additionalProperties:
        type: string
        minProperties: 0
        maxProperties: 1000
      example:
        app_id: "99986338-1113-4706-8302-4420da6158aa" # Pin.meta[app_id], useful for filtering pins per app
    StatusInfo:
      description: Optional info for PinStatus response
      type: object
      additionalProperties:
        type: string
        minProperties: 0
        maxProperties: 1000
      example:
        status_details: "Queue position: 7 of 9" # PinStatus.info[status_details], when status=queued
    TextMatchingStrategy:
      description: Alternative text matching strategy
      type: string
      default: exact
      enum:
        - exact    # full match, case-sensitive (the implicit default)
        - iexact   # full match, case-insensitive
        - partial  # partial match, case-sensitive
        - ipartial # partial match, case-insensitive
    Failure:
      description: Response for a failed request
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - reason
          properties:
            reason:
              type: string
              description: Mandatory string identifying the type of error
              example: "ERROR_CODE_FOR_MACHINES"
            details:
              type: string
              description: Optional, longer description of the error; may include UUID of transaction for support, links to documentation etc
              example: "Optional explanation for humans with more details"
    PSAPin:
      description: Pin object
      type: object
      required:
        - cid
      properties:
        cid:
          description: Content Identifier (CID) to be pinned recursively
          type: string
          example: "QmCIDToBePinned"
        name:
          description: Optional name for pinned data; can be used for lookups later
          type: string
          maxLength: 255
          example: "PreciousData.pdf"
        origins:
          $ref: '#/components/schemas/Origins'
        meta:
          $ref: '#/components/schemas/PinMeta'

  securitySchemes:
    bearerAuth:
      description: |
        The Web3.Storage API uses *bearer tokens* to authenticate requests. You can view and manage these tokens on the [API Tokens page](https://web3.storage/tokens/) in your Web3.Storage account dashboard.

        Your tokens carry many privileges, so be sure to keep them secure! Do not share your *secret tokens* in publicly accessible locations such as a GitHub repository, client-side code, and so forth.

        **Bearer authentication** (also called *token authentication*) is an HTTP authentication scheme that involves security tokens called bearer tokens. The term “bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the `Authorization` header when making requests to protected resources:

        ```js
        Authorization: Bearer <token>
        ```
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    unauthorized:
      description: Unauthorized
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/UnauthorizedErrorResponse'
    forbidden:
      description: Forbidden
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ForbiddenErrorResponse'
    # notFound:
    #   description: Not Found
    #   content:
    #     'application/json':
    #       schema:
    #         $ref: '#/components/schemas/ErrorResponse'
    internalServerError:
      description: Internal Server Error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    badRequest:
      description: Bad Request
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequest:
      description: Error response (Bad request)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'
          examples:
            BadRequestExample:
              $ref: '#/components/examples/BadRequestExample'
    Unauthorized:
      description: Error response (Unauthorized; access token is missing or invalid)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'
          examples:
            UnauthorizedExample:
              $ref: '#/components/examples/UnauthorizedExample'
    NotFound:
      description: Error response (The specified resource was not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'
          examples:
            NotFoundExample:
              $ref: '#/components/examples/NotFoundExample'
    InsufficientFunds:
      description: Error response (Insufficient funds)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'
          examples:
            InsufficientFundsExample:
              $ref: '#/components/examples/InsufficientFundsExample'
    CustomServiceError:
      description: Error response (Custom service error)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'
          examples:
            CustomServiceErrorExample:
              $ref: '#/components/examples/CustomServiceErrorExample'
    InternalServerError:
      description: Error response (Unexpected internal server error)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'
          examples:
            InternalServerErrorExample:
              $ref: '#/components/examples/InternalServerErrorExample'

  examples:
    BadRequestExample:
      value:
        error:
          reason: "BAD_REQUEST"
          details: "Explanation for humans with more details"
      summary: A sample response to a bad request; reason will differ

    UnauthorizedExample:
      value:
        error:
          reason: "UNAUTHORIZED"
          details: "Access token is missing or invalid"
      summary: Response to an unauthorized request

    NotFoundExample:
      value:
        error:
          reason: "NOT_FOUND"
          details: "The specified resource was not found"
      summary: Response to a request for a resource that does not exist

    InsufficientFundsExample:
      value:
        error:
          reason: "INSUFFICIENT_FUNDS"
          details: "Unable to process request due to the lack of funds"
      summary: Response when access token run out of funds

    CustomServiceErrorExample:
      value:
        error:
          reason: "CUSTOM_ERROR_CODE_FOR_MACHINES"
          details: "Optional explanation for humans with more details"
      summary: Response when a custom error occured

    InternalServerErrorExample:
      value:
        error:
          reason: "INTERNAL_SERVER_ERROR"
          details: "Explanation for humans with more details"
      summary: Response when unexpected error occured

  parameters:
    before:
      description: Specifies a date, in ISO 8601 format. Ensures that the call to `/list` will not return any results newer than the given date.
      name: before
      in: query
      required: false
      schema:
        type: string
        format: date-time  # RFC 3339, section 5.6
      example: "2020-07-27T17:32:28Z"
    size:
      description: Specifies the maximum number of uploads to return.
      name: size
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 25
    cid:
      description: Return pin objects responsible for pinning the specified CID(s); be aware that using longer hash functions introduces further constraints on the number of CIDs that will fit under the limit of 2000 characters per URL  in browser contexts
      name: cid
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
        minItems: 1
        maxItems: 10
      style: form # ?cid=Qm1,Qm2,bafy3
      explode: false
      example: ["Qm1","Qm2","bafy3"]
    name:
      description: Return pin objects with specified name (by default a case-sensitive, exact match)
      name: name
      in: query
      required: false
      schema:
        type: string
        maxLength: 255
      example: "PreciousData.pdf"
    match:
      description: Customize the text matching strategy applied when the name filter is present; exact (the default) is a case-sensitive exact match, partial matches anywhere in the name, iexact and ipartial are case-insensitive versions of the exact and partial strategies
      name: match
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/TextMatchingStrategy'
      example: exact
    psaStatus:
      description: Return pin objects for pins with the specified status
      name: status
      in: query
      required: false
      schema:
        type: array
        items:
          description: Status a pin object can have at a pinning service
          type: string
          enum:
            - queued     # pinning operation is waiting in the queue; additional info can be returned in info[status_details]      
            - pinning    # pinning in progress; additional info can be returned in info[status_details]
            - pinned     # pinned successfully
            - failed     # pinning service was unable to finish pinning operation; additional info can be found in info[status_details]
      style: form # ?status=queued,pinning
      explode: false
      example: ["queued","pinning"]
    psaBefore:
      description: Return results created (queued) before provided timestamp
      name: before
      in: query
      required: false
      schema:
        type: string
        format: date-time  # RFC 3339, section 5.6
      example: "2020-07-27T17:32:28Z"
    after:
      description: Return results created (queued) after provided timestamp
      name: after
      in: query
      required: false
      schema:
        type: string
        format: date-time  # RFC 3339, section 5.6
      example: "2020-07-27T17:32:28Z"
    limit:
      description: Max records to return
      name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 10
    meta:
      description: Return pin objects that match specified metadata keys passed as a string representation of a JSON object; when implementing a client library, make sure the parameter is URL-encoded to ensure safe transport
      name: meta
      in: query
      required: false
      content:
        application/json: # ?meta={"foo":"bar"}
          schema:
            $ref: '#/components/schemas/PinMeta'

security:
  - bearerAuth: []
