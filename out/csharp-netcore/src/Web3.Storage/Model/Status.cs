/*
 * Web3.Storage API
 *
 * This documentation describes the HTTP API for [**Web3.Storage**](https://web3.storage), which allows you to quickly and easily build applications using decentralized data storage persisted by [Filecoin](https://filecoin.io) and available over [IPFS](https://ipfs.io).  You can also interact with this API using client libraries. See [**docs.web3.storage**](https://docs.web3.storage) for more information on using a client library, as well as a variety of other guides and how-tos for Web3.Storage as a whole.  ## API endpoint URL  The main public API endpoint URL for Web3.Storage is `https://api.web3.storage`. All endpoints described in this document should be made relative to this root URL. For example, to post to the `/car` endpoint, send your request to `https://api.web3.storage/car`.  ### Rate limits  This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 30 requests with the same API token within a ten second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits. 
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Web3.Storage.Client.OpenAPIDateConverter;

namespace Web3.Storage.Model
{
    /// <summary>
    /// Status
    /// </summary>
    [DataContract(Name = "Status")]
    public partial class Status : IEquatable<Status>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Status" /> class.
        /// </summary>
        /// <param name="cid">Self-describing content-addressed identifiers for distributed systems. Check the [CID (Content IDentifier) Specification](https://github.com/multiformats/cid) for more info..</param>
        /// <param name="dagSize">Total size of the DAG in bytes. (default to 132614M).</param>
        /// <param name="created">This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ..</param>
        /// <param name="pins">pins.</param>
        /// <param name="deals">deals.</param>
        public Status(string cid = default(string), decimal dagSize = 132614M, DateTime created = default(DateTime), List<Pin> pins = default(List<Pin>), List<Deal> deals = default(List<Deal>))
        {
            this.Cid = cid;
            this.DagSize = dagSize;
            this.Created = created;
            this.Pins = pins;
            this.Deals = deals;
        }

        /// <summary>
        /// Self-describing content-addressed identifiers for distributed systems. Check the [CID (Content IDentifier) Specification](https://github.com/multiformats/cid) for more info.
        /// </summary>
        /// <value>Self-describing content-addressed identifiers for distributed systems. Check the [CID (Content IDentifier) Specification](https://github.com/multiformats/cid) for more info.</value>
        [DataMember(Name = "cid", EmitDefaultValue = false)]
        public string Cid { get; set; }

        /// <summary>
        /// Total size of the DAG in bytes.
        /// </summary>
        /// <value>Total size of the DAG in bytes.</value>
        [DataMember(Name = "dagSize", EmitDefaultValue = false)]
        public decimal DagSize { get; set; }

        /// <summary>
        /// This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.
        /// </summary>
        /// <value>This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.</value>
        [DataMember(Name = "created", EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Pins
        /// </summary>
        [DataMember(Name = "pins", EmitDefaultValue = false)]
        public List<Pin> Pins { get; set; }

        /// <summary>
        /// Gets or Sets Deals
        /// </summary>
        [DataMember(Name = "deals", EmitDefaultValue = false)]
        public List<Deal> Deals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Status {\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  DagSize: ").Append(DagSize).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Pins: ").Append(Pins).Append("\n");
            sb.Append("  Deals: ").Append(Deals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Status);
        }

        /// <summary>
        /// Returns true if Status instances are equal
        /// </summary>
        /// <param name="input">Instance of Status to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Status input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.DagSize == input.DagSize ||
                    this.DagSize.Equals(input.DagSize)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Pins == input.Pins ||
                    this.Pins != null &&
                    input.Pins != null &&
                    this.Pins.SequenceEqual(input.Pins)
                ) && 
                (
                    this.Deals == input.Deals ||
                    this.Deals != null &&
                    input.Deals != null &&
                    this.Deals.SequenceEqual(input.Deals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                hashCode = hashCode * 59 + this.DagSize.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Pins != null)
                    hashCode = hashCode * 59 + this.Pins.GetHashCode();
                if (this.Deals != null)
                    hashCode = hashCode * 59 + this.Deals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
