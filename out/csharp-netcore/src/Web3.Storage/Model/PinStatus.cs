/*
 * Web3.Storage API
 *
 * This documentation describes the HTTP API for [**Web3.Storage**](https://web3.storage), which allows you to quickly and easily build applications using decentralized data storage persisted by [Filecoin](https://filecoin.io) and available over [IPFS](https://ipfs.io).  You can also interact with this API using client libraries. See [**docs.web3.storage**](https://docs.web3.storage) for more information on using a client library, as well as a variety of other guides and how-tos for Web3.Storage as a whole.  ## API endpoint URL  The main public API endpoint URL for Web3.Storage is `https://api.web3.storage`. All endpoints described in this document should be made relative to this root URL. For example, to post to the `/car` endpoint, send your request to `https://api.web3.storage/car`.  ### Rate limits  This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 30 requests with the same API token within a ten second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits. 
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Web3.Storage.Client.OpenAPIDateConverter;

namespace Web3.Storage.Model
{
    /// <summary>
    /// Pin object with status
    /// </summary>
    [DataContract(Name = "PinStatus")]
    public partial class PinStatus : IEquatable<PinStatus>, IValidatableObject
    {
        /// <summary>
        /// Status a pin object can have at a pinning service
        /// </summary>
        /// <value>Status a pin object can have at a pinning service</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,

            /// <summary>
            /// Enum Pinning for value: pinning
            /// </summary>
            [EnumMember(Value = "pinning")]
            Pinning = 2,

            /// <summary>
            /// Enum Pinned for value: pinned
            /// </summary>
            [EnumMember(Value = "pinned")]
            Pinned = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4

        }


        /// <summary>
        /// Status a pin object can have at a pinning service
        /// </summary>
        /// <value>Status a pin object can have at a pinning service</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PinStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PinStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PinStatus" /> class.
        /// </summary>
        /// <param name="requestid">Globally unique identifier of the pin request; can be used to check the status of ongoing pinning, or pin removal (required).</param>
        /// <param name="status">Status a pin object can have at a pinning service (required).</param>
        /// <param name="created">Immutable timestamp indicating when a pin request entered a pinning service; can be used for filtering results and pagination (required).</param>
        /// <param name="pin">pin (required).</param>
        /// <param name="delegates">List of multiaddrs designated by pinning service for transferring any new data from external peers (required).</param>
        /// <param name="info">Optional info for PinStatus response.</param>
        public PinStatus(string requestid = default(string), StatusEnum status = default(StatusEnum), DateTime created = default(DateTime), PinStatusPin pin = default(PinStatusPin), List<string> delegates = default(List<string>), Dictionary<string, string> info = default(Dictionary<string, string>))
        {
            // to ensure "requestid" is required (not null)
            this.Requestid = requestid ?? throw new ArgumentNullException("requestid is a required property for PinStatus and cannot be null");
            this.Status = status;
            this.Created = created;
            // to ensure "pin" is required (not null)
            this.Pin = pin ?? throw new ArgumentNullException("pin is a required property for PinStatus and cannot be null");
            // to ensure "delegates" is required (not null)
            this.Delegates = delegates ?? throw new ArgumentNullException("delegates is a required property for PinStatus and cannot be null");
            this.Info = info;
        }

        /// <summary>
        /// Globally unique identifier of the pin request; can be used to check the status of ongoing pinning, or pin removal
        /// </summary>
        /// <value>Globally unique identifier of the pin request; can be used to check the status of ongoing pinning, or pin removal</value>
        [DataMember(Name = "requestid", IsRequired = true, EmitDefaultValue = false)]
        public string Requestid { get; set; }

        /// <summary>
        /// Immutable timestamp indicating when a pin request entered a pinning service; can be used for filtering results and pagination
        /// </summary>
        /// <value>Immutable timestamp indicating when a pin request entered a pinning service; can be used for filtering results and pagination</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Pin
        /// </summary>
        [DataMember(Name = "pin", IsRequired = true, EmitDefaultValue = false)]
        public PinStatusPin Pin { get; set; }

        /// <summary>
        /// List of multiaddrs designated by pinning service for transferring any new data from external peers
        /// </summary>
        /// <value>List of multiaddrs designated by pinning service for transferring any new data from external peers</value>
        [DataMember(Name = "delegates", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Delegates { get; set; }

        /// <summary>
        /// Optional info for PinStatus response
        /// </summary>
        /// <value>Optional info for PinStatus response</value>
        [DataMember(Name = "info", EmitDefaultValue = false)]
        public Dictionary<string, string> Info { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PinStatus {\n");
            sb.Append("  Requestid: ").Append(Requestid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  Delegates: ").Append(Delegates).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PinStatus);
        }

        /// <summary>
        /// Returns true if PinStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of PinStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PinStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Requestid == input.Requestid ||
                    (this.Requestid != null &&
                    this.Requestid.Equals(input.Requestid))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Pin == input.Pin ||
                    (this.Pin != null &&
                    this.Pin.Equals(input.Pin))
                ) && 
                (
                    this.Delegates == input.Delegates ||
                    this.Delegates != null &&
                    input.Delegates != null &&
                    this.Delegates.SequenceEqual(input.Delegates)
                ) && 
                (
                    this.Info == input.Info ||
                    this.Info != null &&
                    input.Info != null &&
                    this.Info.SequenceEqual(input.Info)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Requestid != null)
                    hashCode = hashCode * 59 + this.Requestid.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Pin != null)
                    hashCode = hashCode * 59 + this.Pin.GetHashCode();
                if (this.Delegates != null)
                    hashCode = hashCode * 59 + this.Delegates.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
