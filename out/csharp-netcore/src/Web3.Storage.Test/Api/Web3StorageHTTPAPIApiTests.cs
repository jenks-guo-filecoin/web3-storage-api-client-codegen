/*
 * Web3.Storage API
 *
 * This documentation describes the HTTP API for [**Web3.Storage**](https://web3.storage), which allows you to quickly and easily build applications using decentralized data storage persisted by [Filecoin](https://filecoin.io) and available over [IPFS](https://ipfs.io).  You can also interact with this API using client libraries. See [**docs.web3.storage**](https://docs.web3.storage) for more information on using a client library, as well as a variety of other guides and how-tos for Web3.Storage as a whole.  ## API endpoint URL  The main public API endpoint URL for Web3.Storage is `https://api.web3.storage`. All endpoints described in this document should be made relative to this root URL. For example, to post to the `/car` endpoint, send your request to `https://api.web3.storage/car`.  ### Rate limits  This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 30 requests with the same API token within a ten second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits. 
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Web3.Storage.Client;
using Web3.Storage.Api;
// uncomment below to import models
//using Web3.Storage.Model;

namespace Web3.Storage.Test.Api
{
    /// <summary>
    ///  Class for testing Web3StorageHTTPAPIApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class Web3StorageHTTPAPIApiTests : IDisposable
    {
        private Web3StorageHTTPAPIApi instance;

        public Web3StorageHTTPAPIApiTests()
        {
            instance = new Web3StorageHTTPAPIApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Web3StorageHTTPAPIApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' Web3StorageHTTPAPIApi
            //Assert.IsType<Web3StorageHTTPAPIApi>(instance);
        }

        /// <summary>
        /// Test DeletePinsRequestid
        /// </summary>
        [Fact]
        public void DeletePinsRequestidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestid = null;
            //instance.DeletePinsRequestid(requestid);
        }

        /// <summary>
        /// Test GetCarCid
        /// </summary>
        [Fact]
        public void GetCarCidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cid = null;
            //var response = instance.GetCarCid(cid);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetPins
        /// </summary>
        [Fact]
        public void GetPinsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> cid = null;
            //string name = null;
            //TextMatchingStrategy? match = null;
            //List<string> status = null;
            //DateTime? before = null;
            //DateTime? after = null;
            //int? limit = null;
            //Dictionary<string, string> meta = null;
            //var response = instance.GetPins(cid, name, match, status, before, after, limit, meta);
            //Assert.IsType<PinResults>(response);
        }

        /// <summary>
        /// Test GetPinsRequestid
        /// </summary>
        [Fact]
        public void GetPinsRequestidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestid = null;
            //var response = instance.GetPinsRequestid(requestid);
            //Assert.IsType<PinStatus>(response);
        }

        /// <summary>
        /// Test GetStatusCid
        /// </summary>
        [Fact]
        public void GetStatusCidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cid = null;
            //var response = instance.GetStatusCid(cid);
            //Assert.IsType<Status>(response);
        }

        /// <summary>
        /// Test GetUserUploads
        /// </summary>
        [Fact]
        public void GetUserUploadsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DateTime? before = null;
            //int? size = null;
            //var response = instance.GetUserUploads(before, size);
            //Assert.IsType<List<Status>>(response);
        }

        /// <summary>
        /// Test HeadCarCid
        /// </summary>
        [Fact]
        public void HeadCarCidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string cid = null;
            //instance.HeadCarCid(cid);
        }

        /// <summary>
        /// Test PostCar
        /// </summary>
        [Fact]
        public void PostCarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream body = null;
            //var response = instance.PostCar(body);
            //Assert.IsType<UploadResponse>(response);
        }

        /// <summary>
        /// Test PostPins
        /// </summary>
        [Fact]
        public void PostPinsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PSAPin pSAPin = null;
            //var response = instance.PostPins(pSAPin);
            //Assert.IsType<PinStatus>(response);
        }

        /// <summary>
        /// Test PostPinsRequestid
        /// </summary>
        [Fact]
        public void PostPinsRequestidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestid = null;
            //PSAPin pSAPin = null;
            //var response = instance.PostPinsRequestid(requestid, pSAPin);
            //Assert.IsType<PinStatus>(response);
        }

        /// <summary>
        /// Test PostUpload
        /// </summary>
        [Fact]
        public void PostUploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<System.IO.Stream> file = null;
            //var response = instance.PostUpload(file);
            //Assert.IsType<UploadResponse>(response);
        }
    }
}
