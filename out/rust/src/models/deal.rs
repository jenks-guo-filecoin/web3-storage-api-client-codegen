/*
 * Web3.Storage API
 *
 * This documentation describes the HTTP API for [**Web3.Storage**](https://web3.storage), which allows you to quickly and easily build applications using decentralized data storage persisted by [Filecoin](https://filecoin.io) and available over [IPFS](https://ipfs.io).  You can also interact with this API using client libraries. See [**docs.web3.storage**](https://docs.web3.storage) for more information on using a client library, as well as a variety of other guides and how-tos for Web3.Storage as a whole.  ## API endpoint URL  The main public API endpoint URL for Web3.Storage is `https://api.web3.storage`. All endpoints described in this document should be made relative to this root URL. For example, to post to the `/car` endpoint, send your request to `https://api.web3.storage/car`.  ### Rate limits  This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 30 requests with the same API token within a ten second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Deal {
    /// On-chain ID of the deal.
    #[serde(rename = "dealId", skip_serializing_if = "Option::is_none")]
    pub deal_id: Option<f32>,
    /// Address of the provider storing this data.
    #[serde(rename = "storageProvider", skip_serializing_if = "Option::is_none")]
    pub storage_provider: Option<String>,
    /// Current deal status.
    #[serde(rename = "status")]
    pub status: Status,
    /// Filecoin [Piece CID](https://spec.filecoin.io/systems/filecoin_files/piece/) of the data in the deal.
    #[serde(rename = "pieceCid", skip_serializing_if = "Option::is_none")]
    pub piece_cid: Option<String>,
    /// CID of the data aggregated in this deal.
    #[serde(rename = "dataCid", skip_serializing_if = "Option::is_none")]
    pub data_cid: Option<String>,
    /// Selector for extracting stored data from the aggregated data root.
    #[serde(rename = "dataModelSelector", skip_serializing_if = "Option::is_none")]
    pub data_model_selector: Option<String>,
    /// Date when the deal will become active in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "activation", skip_serializing_if = "Option::is_none")]
    pub activation: Option<String>,
    /// Creation date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "created")]
    pub created: String,
    /// Updated date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
    #[serde(rename = "updated")]
    pub updated: String,
}

impl Deal {
    pub fn new(status: Status, created: String, updated: String) -> Deal {
        Deal {
            deal_id: None,
            storage_provider: None,
            status,
            piece_cid: None,
            data_cid: None,
            data_model_selector: None,
            activation: None,
            created,
            updated,
        }
    }
}

/// Current deal status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Queued")]
    Queued,
    #[serde(rename = "Published")]
    Published,
    #[serde(rename = "Active")]
    Active,
}

