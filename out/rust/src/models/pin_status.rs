/*
 * Web3.Storage API
 *
 * This documentation describes the HTTP API for [**Web3.Storage**](https://web3.storage), which allows you to quickly and easily build applications using decentralized data storage persisted by [Filecoin](https://filecoin.io) and available over [IPFS](https://ipfs.io).  You can also interact with this API using client libraries. See [**docs.web3.storage**](https://docs.web3.storage) for more information on using a client library, as well as a variety of other guides and how-tos for Web3.Storage as a whole.  ## API endpoint URL  The main public API endpoint URL for Web3.Storage is `https://api.web3.storage`. All endpoints described in this document should be made relative to this root URL. For example, to post to the `/car` endpoint, send your request to `https://api.web3.storage/car`.  ### Rate limits  This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 30 requests with the same API token within a ten second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PinStatus : Pin object with status



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PinStatus {
    /// Globally unique identifier of the pin request; can be used to check the status of ongoing pinning, or pin removal
    #[serde(rename = "requestid")]
    pub requestid: String,
    /// Status a pin object can have at a pinning service
    #[serde(rename = "status")]
    pub status: Status,
    /// Immutable timestamp indicating when a pin request entered a pinning service; can be used for filtering results and pagination
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "pin")]
    pub pin: Box<crate::models::PinStatusPin>,
    /// List of multiaddrs designated by pinning service for transferring any new data from external peers
    #[serde(rename = "delegates")]
    pub delegates: Vec<String>,
    /// Optional info for PinStatus response
    #[serde(rename = "info", skip_serializing_if = "Option::is_none")]
    pub info: Option<::std::collections::HashMap<String, String>>,
}

impl PinStatus {
    /// Pin object with status
    pub fn new(requestid: String, status: Status, created: String, pin: crate::models::PinStatusPin, delegates: Vec<String>) -> PinStatus {
        PinStatus {
            requestid,
            status,
            created,
            pin: Box::new(pin),
            delegates,
            info: None,
        }
    }
}

/// Status a pin object can have at a pinning service
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "pinning")]
    Pinning,
    #[serde(rename = "pinned")]
    Pinned,
    #[serde(rename = "failed")]
    Failed,
}

