=begin
#Web3.Storage API

#This documentation describes the HTTP API for [**Web3.Storage**](https://web3.storage), which allows you to quickly and easily build applications using decentralized data storage persisted by [Filecoin](https://filecoin.io) and available over [IPFS](https://ipfs.io).  You can also interact with this API using client libraries. See [**docs.web3.storage**](https://docs.web3.storage) for more information on using a client library, as well as a variety of other guides and how-tos for Web3.Storage as a whole.  ## API endpoint URL  The main public API endpoint URL for Web3.Storage is `https://api.web3.storage`. All endpoints described in this document should be made relative to this root URL. For example, to post to the `/car` endpoint, send your request to `https://api.web3.storage/car`.  ### Rate limits  This API imposes rate limits to ensure quality of service. You may receive a 429 \"Too many requests\" error if you make more than 30 requests with the same API token within a ten second window. Upon receiving a response with a 429 status, clients should retry the failed request after a small delay. To avoid 429 responses, you may wish to implement client-side request throttling to stay within the limits. 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Web3Storage::Web3StorageHTTPAPIApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'Web3StorageHTTPAPIApi' do
  before do
    # run before each test
    @api_instance = Web3Storage::Web3StorageHTTPAPIApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of Web3StorageHTTPAPIApi' do
    it 'should create an instance of Web3StorageHTTPAPIApi' do
      expect(@api_instance).to be_instance_of(Web3Storage::Web3StorageHTTPAPIApi)
    end
  end

  # unit tests for delete_pins_requestid
  # Remove pin object
  # Remove a pin object
  # @param requestid 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_pins_requestid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_car_cid
  # Retrieve a CAR
  # Retrieve an [IPFS DAG](https://docs.ipfs.io/concepts/merkle-dag/) (Directed Acyclic Graph) packaged in a CAR file by using &#x60;/car/{cid}&#x60;, supplying the CID of the data you are interested in.
  # @param cid 
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_car_cid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pins
  # List pin objects
  # List all the pin objects, matching optional filters; when no filter is provided, only successful pins are returned
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :cid Return pin objects responsible for pinning the specified CID(s); be aware that using longer hash functions introduces further constraints on the number of CIDs that will fit under the limit of 2000 characters per URL  in browser contexts
  # @option opts [String] :name Return pin objects with specified name (by default a case-sensitive, exact match)
  # @option opts [TextMatchingStrategy] :match Customize the text matching strategy applied when the name filter is present; exact (the default) is a case-sensitive exact match, partial matches anywhere in the name, iexact and ipartial are case-insensitive versions of the exact and partial strategies
  # @option opts [Array<String>] :status Return pin objects for pins with the specified status
  # @option opts [Time] :before Return results created (queued) before provided timestamp
  # @option opts [Time] :after Return results created (queued) after provided timestamp
  # @option opts [Integer] :limit Max records to return
  # @option opts [Hash<String, String>] :meta Return pin objects that match specified metadata keys passed as a string representation of a JSON object; when implementing a client library, make sure the parameter is URL-encoded to ensure safe transport
  # @return [PinResults]
  describe 'get_pins test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pins_requestid
  # Get pin object
  # Get a pin object and its status
  # @param requestid 
  # @param [Hash] opts the optional parameters
  # @return [PinStatus]
  describe 'get_pins_requestid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_status_cid
  # Retrieve information about an upload
  # Retrieve metadata about a specific file by using &#x60;/status/{cid}&#x60;, supplying the CID of the file you are interested in. This metadata includes the creation date and file size, as well as details about how the network is storing your data. Using this information, you can identify peers on the [IPFS (InterPlanetary File System)](https://ipfs.io) network that are pinning the data, and [Filecoin](https://filecoin.io) storage providers that have accepted deals to store the data.
  # @param cid 
  # @param [Hash] opts the optional parameters
  # @return [Status]
  describe 'get_status_cid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_uploads
  # List previous uploads
  # Lists all previous uploads for the account ordered by creation date, newest first. These results can be paginated by specifying &#x60;before&#x60; and &#x60;size&#x60; parameters in the query string, using the creation date associated with the oldest upload returned in each batch as the value of &#x60;before&#x60; in subsequent calls.  Note this endpoint returns all uploads for the account not just the API key in use.  The information returned includes the creation date and file size, as well as details about how the network is storing your data. Using this information, you can identify peers on the [IPFS (InterPlanetary File System)](https://ipfs.io) network that are pinning the data, and [Filecoin](https://filecoin.io) storage providers that have accepted deals to store the data. 
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :before Specifies a date, in ISO 8601 format. Ensures that the call to &#x60;/list&#x60; will not return any results newer than the given date.
  # @option opts [Integer] :size Specifies the maximum number of uploads to return.
  # @return [Array<Status>]
  describe 'get_user_uploads test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for head_car_cid
  # Retrieve HTTP headers regarding a CAR
  # This method is useful for doing a dry run of a call to &#x60;/car/{cid}&#x60;. Because it only returns HTTP header information, it is far more lightweight and can be used to get only the metadata about the given CAR file without retrieving a whole payload in the body of the HTTP response. 
  # @param cid 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'head_car_cid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_car
  # Upload a CAR
  # Upload a [CAR](https://ipld.io/specs/transport/car/) (Content Addressable aRchive) file and store the [IPFS DAG](https://docs.ipfs.io/concepts/merkle-dag/) (Directed Acyclic Graph) it contains.  See the [Working with Content Archives guide](https://docs.web3.storage/how-tos/work-with-car-files) for details on creating CARs and splitting them into chunks for upload using the [carbites JavaScript API](https://github.com/nftstorage/carbites), [command line tool](https://github.com/nftstorage/carbites-cli/), or [Go library](https://github.com/alanshaw/go-carbites).  Requests to this endpoint have a maximum payload size of 100MB but partial DAGs are supported, so multiple CAR files with the same root but with different sub-trees can be sent. This enables uploading of files that are bigger than the maximum payload size.  Note that only one CAR can be uploaded at a time, and only CAR files are accepted. This is in contrast to [&#x60;/upload&#x60;](#operation/post-upload), which can upload multiple files at once and accepts both CAR files and files from the client.  You can also provide a name for the file using the header &#x60;X-NAME&#x60;, but be sure to encode the filename first. For example &#x60;LICENSEâ€“MIT&#x60; should be sent as &#x60;LICENSE%E2%80%93MIT&#x60;. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [UploadResponse]
  describe 'post_car test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_pins
  # Add pin object
  # Add a new pin object for the current access token
  # @param psa_pin 
  # @param [Hash] opts the optional parameters
  # @return [PinStatus]
  describe 'post_pins test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_pins_requestid
  # Replace pin object
  # Replace an existing pin object (shortcut for executing remove and add operations in one step to avoid unnecessary garbage collection of blocks present in both recursive pins)
  # @param requestid 
  # @param psa_pin 
  # @param [Hash] opts the optional parameters
  # @return [PinStatus]
  describe 'post_pins_requestid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_upload
  # Upload and store one or more files
  # Store files using Web3.Storage. You can upload either a single file or multiple files.  Send the POST request with one of the following: - a single file, with a single blob/file object as the body - multiple files, as &#x60;FormData&#x60; with &#x60;Content-Disposition&#x60; headers for each part to specify filenames and the request header &#x60;Content-Type: multipart/form-data&#x60;  Requests to this endpoint have a maximum payload size of 100MB. To upload larger files, see the documentation for the &#x60;/car&#x60; endpoint.  You can also provide a name for the file using the header &#x60;X-NAME&#x60;, but be sure to encode the filename first. For example &#x60;LICENSEâ€“MIT&#x60; should be sent as &#x60;LICENSE%E2%80%93MIT&#x60;. 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<File>] :file 
  # @return [UploadResponse]
  describe 'post_upload test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
